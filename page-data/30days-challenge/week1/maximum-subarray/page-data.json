{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/30days-challenge/week1/maximum-subarray/","result":{"data":{"site":{"siteMetadata":{"title":"Gatsby Default Starter","author":"@gatsbyjs"}},"markdownRemark":{"id":"6563befd-a6a5-5fec-9c19-a365da90bfd8","html":"<h2>maxSubArray ( mins)</h2>\n<h3>Question：</h3>\n<h5>Description:</h5>\n<ul>\n<li>Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.</li>\n</ul>\n<h5>Note:</h5>\n<ul>\n<li>If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.</li>\n</ul>\n<h5>Examples:</h5>\n<pre><code>Input: [-2,1,-3,4,-1,2,1,-5,4],\nOutput: 6\nExplanation: [4,-1,2,1] has the largest sum = 6.\n</code></pre>\n<h3>Process:</h3>\n<ul>\n<li>一开始完全无从下手，暴力求解 bruta force也没有去想。。O(n ^ 3)</li>\n<li>后来做到后面有意识这道题是动态规划，还是没有去做出来</li>\n<li>后来听了个youtube老哥的视频<a href=\"https://www.youtube.com/watch?v=jcjXgmHHpds\">https://www.youtube.com/watch?v=jcjXgmHHpds</a></li>\n<li>后来恍然大悟</li>\n<li>主要还是证明自己的理解是对的，或者说 理解 为什么前后会有关联的过程</li>\n<li>可以看到解法中sum 对应的项代表，遍历到这里的时候的最大值，</li>\n<li>两种情况，一种是 前面最大值加上自己（连续下去）</li>\n<li>另一种是 就是当前的值，（重新计数）</li>\n<li>第一种情况，前面的最大值加上自己，这个也没有限制 是哪个区间段，不过总体两个走向，加上自己，或者从头再来，还是很有道理的。</li>\n<li>主要是 没有想通，为什么 一定只有两种方式</li>\n<li>\n<p>为什么  不可以什么都不做。取之前的。</p>\n<ul>\n<li>这个我理解是 为了连续 所以要这么算，具体取不取之前的，这个最后会有定论/</li>\n</ul>\n</li>\n<li>所以 针对新值，实际有三种情况，连续下去，，重投再来，索性不管，索性不管我们不考虑，在另一个唯独考虑，处于连续性只考虑两种</li>\n</ul>\n<h3>Answer:</h3>\n<h3>Others Answer:</h3>","timeToRead":1,"frontmatter":{"title":"maxSubArray"},"fields":{"slug":"/30days-challenge/week1/maximum-subarray/"}}},"pageContext":{"slug":"/30days-challenge/week1/maximum-subarray/","previous":"preserved","next":"preserved"}}}