{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/learn/array-and-string/introduction-to-2d-array/spiral-matrix/","result":{"data":{"site":{"siteMetadata":{"title":"Gatsby Default Starter","author":"@gatsbyjs"}},"markdownRemark":{"id":"0c73a7cd-acc5-5128-85b9-bb96c5f144a3","html":"<h2>Spiral Matrix (55 mins)</h2>\n<h3>Questionï¼š</h3>\n<h5>Description:</h5>\n<ul>\n<li>Given a matrix of m x n elements (m rows, n columns), return all elements of the matrix in spiral order.</li>\n</ul>\n<h5>Note:</h5>\n<ul>\n<li>placeholder</li>\n</ul>\n<h5>Examples:</h5>\n<pre><code>Input:\n[\n [ 1, 2, 3 ],\n [ 4, 5, 6 ],\n [ 7, 8, 9 ]\n]\nOutput: [1,2,3,6,9,8,7,4,5]\n\nInput:\n[\n  [1, 2, 3, 4],\n  [5, 6, 7, 8],\n  [9,10,11,12]\n]\nOutput: [1,2,3,4,8,12,11,10,9,5,6,7]\n</code></pre>\n<h3>Process:</h3>\n<ul>\n<li>use a variable to record direction( (0,1,2,3) % 4 ) means four direction, selfAdd if exceed the boundary</li>\n<li>use i,j to loop</li>\n<li>after seeing hints of that problems by others, a more space saving method is maybe keep track of the row/col that have been scaned.</li>\n</ul>\n<h3>Answer:</h3>\n<h3>Others Answer:</h3>","timeToRead":1,"frontmatter":{"title":"Spiral Matrix"},"fields":{"slug":"/learn/array-and-string/introduction-to-2d-array/spiral-matrix/"}}},"pageContext":{"slug":"/learn/array-and-string/introduction-to-2d-array/spiral-matrix/","previous":"preserved","next":"preserved"}}}