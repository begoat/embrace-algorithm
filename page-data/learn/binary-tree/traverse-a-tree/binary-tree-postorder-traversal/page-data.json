{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/learn/binary-tree/traverse-a-tree/binary-tree-postorder-traversal/","result":{"data":{"site":{"siteMetadata":{"title":"Gatsby Default Starter","author":"@gatsbyjs"}},"markdownRemark":{"id":"56b18083-bbab-585b-aca1-70c1dfb7eabf","html":"<h2>Binary Tree Postorder Traversal</h2>\n<h3>Question：</h3>\n<p>Given a binary tree, return the <em>postorder</em> traversal of its nodes&#39; values.</p>\n<p><strong>Example:</strong></p>\n<pre>\n<strong>Input:</strong>&nbsp;<code>[1,null,2,3]</code>\n   1\n    \\\n     2\n    /\n   3\n\n<strong>Output:</strong>&nbsp;<code>[3,2,1]</code>\n</pre>\n<p><strong>Follow up:</strong> Recursive solution is trivial, could you do it iteratively?</p>\n<h3>Process:</h3>\n<ul>\n<li>！！！看了自己中序遍历的代码，发现，除了先序遍历，其他的都需要调整栈的位置，先pop 了 top之后，在重新将left right，按照位置给push到栈中，同时标记，见过，第二次见的时候，说明已经遍历过了完成了，该打印了。</li>\n</ul>\n<h3>Answer:</h3>\n<h3>Others Answer:</h3>","timeToRead":1,"frontmatter":{"title":"Binary Tree Postorder Traversal"},"fields":{"slug":"/learn/binary-tree/traverse-a-tree/binary-tree-postorder-traversal/"}}},"pageContext":{"slug":"/learn/binary-tree/traverse-a-tree/binary-tree-postorder-traversal/","previous":"preserved","next":"preserved"}}}