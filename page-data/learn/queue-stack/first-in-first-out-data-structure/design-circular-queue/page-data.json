{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/learn/queue-stack/first-in-first-out-data-structure/design-circular-queue/","result":{"data":{"site":{"siteMetadata":{"title":"Gatsby Default Starter","author":"@gatsbyjs"}},"markdownRemark":{"id":"a92d6b68-5905-5382-b6b9-d96ad0f82c52","html":"<h2>Design Circular Queue</h2>\n<h3>Question：</h3>\n<p>Design your implementation of the circular queue. The circular queue is a linear data structure in which the operations are performed based on FIFO (First In First Out) principle and the last position is connected back to the first position to make a circle. It is also called &quot;Ring Buffer&quot;.</p>\n<p>One of the benefits of the circular queue is that we can make use of the spaces in front of the queue. In a normal queue, once the queue becomes full, we cannot insert the next element even if there is a space in front of the queue. But using the circular queue, we can use the space to store new values.</p>\n<p>Your implementation should support following operations:</p>\n<ul>\n\t<li><code>MyCircularQueue(k)</code>: Constructor, set the size of the queue to be k.</li>\n\t<li><code>Front</code>: Get the front item from the queue. If the queue is empty, return -1.</li>\n\t<li><code>Rear</code>: Get the last item from the queue. If the queue is empty, return -1.</li>\n\t<li><code>enQueue(value)</code>: Insert an element into the circular queue. Return true if the operation is successful.</li>\n\t<li><code>deQueue()</code>: Delete an element from the circular queue. Return true if the operation is successful.</li>\n\t<li><code>isEmpty()</code>: Checks whether the circular queue is empty or not.</li>\n\t<li><code>isFull()</code>: Checks whether the circular queue is full or not.</li>\n</ul>\n<p>&nbsp;</p>\n<p><strong>Example:</strong></p>\n<pre>\nMyCircularQueue circularQueue = new MyCircularQueue(3); // set the size to be 3\ncircularQueue.enQueue(1); &nbsp;// return true\ncircularQueue.enQueue(2); &nbsp;// return true\ncircularQueue.enQueue(3); &nbsp;// return true\ncircularQueue.enQueue(4); &nbsp;// return false, the queue is full\ncircularQueue.Rear(); &nbsp;// return 3\ncircularQueue.isFull(); &nbsp;// return true\ncircularQueue.deQueue(); &nbsp;// return true\ncircularQueue.enQueue(4); &nbsp;// return true\ncircularQueue.Rear(); &nbsp;// return 4\n</pre>\n<p> </p>\n<p><strong>Note:</strong></p>\n<ul>\n\t<li>All values will be in the range of [0, 1000].</li>\n\t<li>The number of operations will be in the range of&nbsp;[1, 1000].</li>\n\t<li>Please do not use the built-in Queue library.</li>\n</ul>","timeToRead":1,"frontmatter":{"title":"Design Circular Queue"},"fields":{"slug":"/learn/queue-stack/first-in-first-out-data-structure/design-circular-queue/"}}},"pageContext":{"slug":"/learn/queue-stack/first-in-first-out-data-structure/design-circular-queue/","previous":"preserved","next":"preserved"}}}