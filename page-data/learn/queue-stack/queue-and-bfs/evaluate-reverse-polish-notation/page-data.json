{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/learn/queue-stack/queue-and-bfs/evaluate-reverse-polish-notation/","result":{"data":{"site":{"siteMetadata":{"title":"Gatsby Default Starter","author":"@gatsbyjs"}},"markdownRemark":{"id":"f4a012d1-f6a4-5cf4-bf8b-a050f534973a","html":"<h2>Evaluate Reverse Polish Notation</h2>\n<h3>Question：</h3>\n<p>Evaluate the value of an arithmetic expression in <a href=\"http://en.wikipedia.org/wiki/Reverse_Polish_notation\" target=\"_blank\">Reverse Polish Notation</a>.</p>\n<p>Valid operators are <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>. Each operand may be an integer or another expression.</p>\n<p><strong>Note:</strong></p>\n<ul>\n\t<li>Division between two integers should truncate toward zero.</li>\n\t<li>The given RPN expression is always valid. That means the expression would always evaluate to a result and there won&#39;t&nbsp;be any&nbsp;divide&nbsp;by zero operation.</li>\n</ul>\n<p><strong>Example 1:</strong></p>\n<pre>\n<strong>Input:</strong> [&quot;2&quot;, &quot;1&quot;, &quot;+&quot;, &quot;3&quot;, &quot;*&quot;]\n<strong>Output:</strong> 9\n<strong>Explanation:</strong> ((2 + 1) * 3) = 9\n</pre>\n<p><strong>Example 2:</strong></p>\n<pre>\n<strong>Input:</strong> [&quot;4&quot;, &quot;13&quot;, &quot;5&quot;, &quot;/&quot;, &quot;+&quot;]\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> (4 + (13 / 5)) = 6\n</pre>\n<p><strong>Example 3:</strong></p>\n<pre>\n<strong>Input:</strong> [&quot;10&quot;, &quot;6&quot;, &quot;9&quot;, &quot;3&quot;, &quot;+&quot;, &quot;-11&quot;, &quot;*&quot;, &quot;/&quot;, &quot;*&quot;, &quot;17&quot;, &quot;+&quot;, &quot;5&quot;, &quot;+&quot;]\n<strong>Output:</strong> 22\n<strong>Explanation:</strong>\n  ((10 * (6 / ((9 + 3) * -11))) + 17) + 5\n= ((10 * (6 / (12 * -11))) + 17) + 5\n= ((10 * (6 / -132)) + 17) + 5\n= ((10 * 0) + 17) + 5\n= (0 + 17) + 5\n= 17 + 5\n= 22\n</pre>\n<h3>Process:</h3>\n<ul>\n<li>Division between two integers should truncate toward zero 这句话理解不透彻导致错了一次</li>\n<li>原来Js中有这样的一个方法 Math.trunc()</li>\n</ul>\n<h3>Answer:</h3>\n<h3>Others Answer:</h3>","timeToRead":1,"frontmatter":{"title":"Evaluate Reverse Polish Notation"},"fields":{"slug":"/learn/queue-stack/queue-and-bfs/evaluate-reverse-polish-notation/"}}},"pageContext":{"slug":"/learn/queue-stack/queue-and-bfs/evaluate-reverse-polish-notation/","previous":"preserved","next":"preserved"}}}