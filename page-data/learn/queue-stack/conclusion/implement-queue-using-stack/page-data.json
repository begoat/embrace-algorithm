{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/learn/queue-stack/conclusion/implement-queue-using-stack/","result":{"data":{"site":{"siteMetadata":{"title":"Gatsby Default Starter","author":"@gatsbyjs"}},"markdownRemark":{"id":"6b789302-64bc-5fb6-9d0c-9060bcdcf924","html":"<h2>Implement Queue using Stacks</h2>\n<h3>Questionï¼š</h3>\n<p>Implement the following operations of a queue using stacks.</p>\n<ul>\n\t<li>push(x) -- Push element x to the back of queue.</li>\n\t<li>pop() -- Removes the element from in front of queue.</li>\n\t<li>peek() -- Get the front element.</li>\n\t<li>empty() -- Return whether the queue is empty.</li>\n</ul>\n<p><b>Example:</b></p>\n<pre>\nMyQueue queue = new MyQueue();\n\nqueue.push(1);\nqueue.push(2);\nqueue.peek();  // returns 1\nqueue.pop();   // returns 1\nqueue.empty(); // returns false</pre>\n<p><b>Notes:</b></p>\n<ul>\n\t<li>You must use <i>only</i> standard operations of a stack -- which means only <code>push to top</code>, <code>peek/pop from top</code>, <code>size</code>, and <code>is empty</code> operations are valid.</li>\n\t<li>Depending on your language, stack may not be supported natively. You may simulate a stack by using a list or deque (double-ended queue), as long as you use only standard operations of a stack.</li>\n\t<li>You may assume that all operations are valid (for example, no pop or peek operations will be called on an empty queue).</li>\n</ul>\n<h3>Process:</h3>\n<ul>\n<li>placeholder</li>\n</ul>\n<h3>Answer:</h3>\n<h3>Others Answer:</h3>","timeToRead":1,"frontmatter":{"title":"Implement Queue using Stacks"},"fields":{"slug":"/learn/queue-stack/conclusion/implement-queue-using-stack/"}}},"pageContext":{"slug":"/learn/queue-stack/conclusion/implement-queue-using-stack/","previous":"preserved","next":"preserved"}}}