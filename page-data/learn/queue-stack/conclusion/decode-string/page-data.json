{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/learn/queue-stack/conclusion/decode-string/","result":{"data":{"site":{"siteMetadata":{"title":"Gatsby Default Starter","author":"@gatsbyjs"}},"markdownRemark":{"id":"929ba0ae-8e5c-5bd4-bace-3f8f06c08c87","html":"<h2>Decode String</h2>\n<h3>Question：</h3>\n<p>Given an encoded string, return its decoded string.</p>\n<p>The encoding rule is: <code>k[encoded_string]</code>, where the <i>encoded_string</i> inside the square brackets is being repeated exactly <i>k</i> times. Note that <i>k</i> is guaranteed to be a positive integer.</p>\n<p>You may assume that the input string is always valid; No extra white spaces, square brackets are well-formed, etc.</p>\n<p>Furthermore, you may assume that the original data does not contain any digits and that digits are only for those repeat numbers, <i>k</i>. For example, there won&#39;t be input like <code>3a</code> or <code>2[4]</code>.</p>\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input:</strong> s = \"3[a]2[bc]\"\n<strong>Output:</strong> \"aaabcbc\"\n</pre><p><strong>Example 2:</strong></p>\n<pre><strong>Input:</strong> s = \"3[a2[c]]\"\n<strong>Output:</strong> \"accaccacc\"\n</pre><p><strong>Example 3:</strong></p>\n<pre><strong>Input:</strong> s = \"2[abc]3[cd]ef\"\n<strong>Output:</strong> \"abcabccdcdcdef\"\n</pre><p><strong>Example 4:</strong></p>\n<pre><strong>Input:</strong> s = \"abc3[cd]xyz\"\n<strong>Output:</strong> \"abccdcdcdxyz\"\n</pre>\n<h3>Process:</h3>\n<ul>\n<li>这个乍一看跟 什么 栈实现的四则运算有异曲同工之妙，四则运算的原则是右边括号不入栈，这个也是一样</li>\n<li>从左边开始扫描，压栈，遇到右边的括号，就处理下，处理到最近的左括号为止。</li>\n<li>js的基础知识 join方法 不传参数默认会认为是 ','这个点我忘记了，我以为直接就是没有separator了。。。</li>\n</ul>\n<h3>Answer:</h3>\n<h3>Others Answer:</h3>","timeToRead":1,"frontmatter":{"title":"Decode String"},"fields":{"slug":"/learn/queue-stack/conclusion/decode-string/"}}},"pageContext":{"slug":"/learn/queue-stack/conclusion/decode-string/","previous":"preserved","next":"preserved"}}}