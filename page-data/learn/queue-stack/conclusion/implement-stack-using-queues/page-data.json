{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/learn/queue-stack/conclusion/implement-stack-using-queues/","result":{"data":{"site":{"siteMetadata":{"title":"Gatsby Default Starter","author":"@gatsbyjs"}},"markdownRemark":{"id":"4c1534e6-db53-5f90-b2a0-a342702ff9cf","html":"<h2>Implement Stack using Queues</h2>\n<h3>Questionï¼š</h3>\n<p>Implement the following operations of a stack using queues.</p>\n<ul>\n\t<li>push(x) -- Push element x onto stack.</li>\n\t<li>pop() -- Removes the element on top of the stack.</li>\n\t<li>top() -- Get the top element.</li>\n\t<li>empty() -- Return whether the stack is empty.</li>\n</ul>\n<p><b>Example:</b></p>\n<pre>\nMyStack stack = new MyStack();\n\nstack.push(1);\nstack.push(2);\nstack.top();   // returns 2\nstack.pop();   // returns 2\nstack.empty(); // returns false</pre>\n<p><b>Notes:</b></p>\n<ul>\n\t<li>You must use <i>only</i> standard operations of a queue -- which means only <code>push to back</code>, <code>peek/pop from front</code>, <code>size</code>, and <code>is empty</code> operations are valid.</li>\n\t<li>Depending on your language, queue may not be supported natively. You may simulate a queue by using a list or deque (double-ended queue), as long as you use only standard operations of a queue.</li>\n\t<li>You may assume that all operations are valid (for example, no pop or top operations will be called on an empty stack).</li>\n</ul>\n<h3>Process:</h3>\n<ul>\n<li>placeholder</li>\n</ul>\n<h3>Answer:</h3>\n<h3>Others Answer:</h3>","timeToRead":1,"frontmatter":{"title":"Implement Stack using Queues"},"fields":{"slug":"/learn/queue-stack/conclusion/implement-stack-using-queues/"}}},"pageContext":{"slug":"/learn/queue-stack/conclusion/implement-stack-using-queues/","previous":"preserved","next":"preserved"}}}